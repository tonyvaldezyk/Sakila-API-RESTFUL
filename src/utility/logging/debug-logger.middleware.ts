import { Request, Response, NextFunction } from 'express';
import { Log } from './Log';

/**
 * Middleware avanc√© pour le logging d√©taill√© des requ√™tes et r√©ponses API
 * Utile pour le d√©bogage et les d√©monstrations
 */
export const debugLoggerMiddleware = (req: Request, res: Response, next: NextFunction) => {
  // Stocke l'heure de d√©but de la requ√™te
  const startTime = new Date();
  
  // Log de la requ√™te entrante
  const requestBody = req.body && Object.keys(req.body).length > 0 
    ? JSON.stringify(req.body, null, 2) 
    : '(empty)';
  
  Log(`üîç REQU√äTE ${req.method} ${req.originalUrl}`);
  Log(`üì§ HEADERS: ${JSON.stringify(req.headers, null, 2)}`);
  Log(`üì¶ BODY: ${requestBody}`);
  
  // Capture la m√©thode originale pour pouvoir intercepter la r√©ponse
  const originalSend = res.send;
  
  // Remplace la m√©thode send pour intercepter la r√©ponse
  res.send = function(body: any): Response {
    // Restaure la m√©thode originale
    res.send = originalSend;
    
    // Calcule le temps d'ex√©cution
    const executionTime = new Date().getTime() - startTime.getTime();
    
    // Log de la r√©ponse
    try {
      // Tente de parser le body comme JSON pour un affichage plus propre
      const parsedBody = typeof body === 'string' ? JSON.parse(body) : body;
      Log(`‚úÖ R√âPONSE ${res.statusCode} (${executionTime}ms)`);
      Log(`üì• BODY: ${JSON.stringify(parsedBody, null, 2)}`);
    } catch (e) {
      // Si ce n'est pas du JSON, affiche tel quel
      Log(`‚úÖ R√âPONSE ${res.statusCode} (${executionTime}ms)`);
      Log(`üì• BODY: ${typeof body === 'string' ? body.substring(0, 1000) + (body.length > 1000 ? '...(tronqu√©)' : '') : '(non textuel)'}`);
    }
    
    // Appelle la m√©thode originale avec les arguments fournis
    return originalSend.apply(res, [body]);
  };
  
  // Passe au middleware suivant
  next();
};
